stages:
  - build
  - release

variables:
  ELECTRON_FORGE_VERSION: "6.0.0"

# ─────────────────────────────────────────────────────────────────────────────
#  1. Linux build (unchanged)
# ─────────────────────────────────────────────────────────────────────────────
build_packages:
  stage: build
  image: node:20
  rules:
    - if: $CI_COMMIT_TAG  # Run this job only when a tag is pushed
  script:
    - apt-get update && apt-get install -y dpkg fakeroot jq npm bash fuse
    - curl -L -o appimagetool-x86_64.AppImage https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage
    - chmod +x appimagetool-x86_64.AppImage
    - chmod +x build.sh
    - source build.sh
  artifacts:
    paths:
      - dist/

# ─────────────────────────────────────────────────────────────────────────────
#  2. Windows build (new, runs on a Windows runner)
# ─────────────────────────────────────────────────────────────────────────────
build_windows:
  stage: build
  # This job will only run on runners tagged "windows"
  tags:
    - windows
  rules:
    - if: $CI_COMMIT_TAG                                  # Tagged release
  script:
    - echo "Installing Node deps on Windows…"
    - npm ci                                              # Clean install
    - echo "Building Windows package…"
    - npx electron-builder --config electron-builder.yml --win nsis
  artifacts:
    paths:
      - dist/emulsion-*win-*.exe
      - dist/emulsion-*win-*.zip

# ─────────────────────────────────────────────────────────────────────────────
#  3. Release & Upload (also unchanged, but now will include Windows artifacts)
# ─────────────────────────────────────────────────────────────────────────────
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Creating release for version $CI_COMMIT_TAG"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Release $CI_COMMIT_TAG for Linux and Windows.'
    assets:
      links:
        - name: "emulsion-${CI_COMMIT_TAG}.deb"
          link_type: "package"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${CI_COMMIT_TAG}/emulsion-${CI_COMMIT_TAG}.deb"
        - name: "emulsion-${CI_COMMIT_TAG}.AppImage"
          link_type: "package"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${CI_COMMIT_TAG}/emulsion-${CI_COMMIT_TAG}.AppImage"
        - name: "emulsion-${CI_COMMIT_TAG}.exe"
          link_type: "package"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${CI_COMMIT_TAG}/emulsion-${CI_COMMIT_TAG}.exe"
        - name: "emulsion-${CI_COMMIT_TAG}.win.zip"
          link_type: "package"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${CI_COMMIT_TAG}/emulsion-${CI_COMMIT_TAG}.win.zip"
  dependencies:
    - upload_assets

upload_assets:
  stage: release
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      for file in dist/*; do
        echo "Uploading $file…"
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
             --upload-file "$file" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${CI_COMMIT_TAG}/$(basename "$file")"
      done
  dependencies:
    - build_packages
    - build_windows
